// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContex))]
    [Migration("20240530040455_GetSpesimensByPointIdSPR")]
    partial class GetSpesimensByPointIdSPR
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("URLImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("API.Entities.ClassificationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClassificationItems");
                });

            modelBuilder.Entity("API.Entities.Conversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Factor")
                        .HasColumnType("real");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceUnitId")
                        .HasColumnType("int");

                    b.Property<int>("TargetUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceUnitId");

                    b.HasIndex("TargetUnitId");

                    b.ToTable("Conversions");
                });

            modelBuilder.Entity("API.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("API.Entities.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abstrac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublisher")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserUploaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserUploaderId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("API.Entities.Item", b =>
                {
                    b.Property<int>("itemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("itemId"));

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassificationItemId")
                        .HasColumnType("int");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("itemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassificationItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("API.Entities.Place", b =>
                {
                    b.Property<int>("PlaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Lon")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("URLImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceID");

                    b.HasIndex("StateId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("API.Entities.Point", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<string>("LatLon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Lon")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("URLImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PointId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("API.Entities.QualityStandard", b =>
                {
                    b.Property<int>("QSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QSId"));

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QSId");

                    b.ToTable("QualityStandards");
                });

            modelBuilder.Entity("API.Entities.QualityStandardItem", b =>
                {
                    b.Property<int>("QSIId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QSIId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("QSId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("QSIId");

                    b.HasIndex("ItemId");

                    b.HasIndex("QSId");

                    b.HasIndex("UnitId");

                    b.ToTable("QualityStandardItems");
                });

            modelBuilder.Entity("API.Entities.QualityStandardItemRange", b =>
                {
                    b.Property<int>("QSIRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QSIRId"));

                    b.Property<float>("LowerLim")
                        .HasColumnType("real");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QSIId")
                        .HasColumnType("int");

                    b.Property<int?>("QualityStandardItemQSIId")
                        .HasColumnType("int");

                    b.Property<int>("SemaphoreId")
                        .HasColumnType("int");

                    b.Property<float>("UpperLim")
                        .HasColumnType("real");

                    b.HasKey("QSIRId");

                    b.HasIndex("QualityStandardItemQSIId");

                    b.HasIndex("SemaphoreId");

                    b.ToTable("QualityStandardItemRanges");
                });

            modelBuilder.Entity("API.Entities.Semaphore", b =>
                {
                    b.Property<int>("SemaphoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SemaphoreId"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SemaphoreId");

                    b.ToTable("Semaphores");
                });

            modelBuilder.Entity("API.Entities.Spesimen", b =>
                {
                    b.Property<int>("SpesimenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpesimenId"));

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SpesimenDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SpesimenId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PointId");

                    b.ToTable("Spesimens");
                });

            modelBuilder.Entity("API.Entities.SpesimenItem", b =>
                {
                    b.Property<int>("SIId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SIId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("LabName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Preferent")
                        .HasColumnType("bit");

                    b.Property<string>("Responsible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpesimenId")
                        .HasColumnType("int");

                    b.Property<int>("UnitBaseId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.Property<float>("ValueBase")
                        .HasColumnType("real");

                    b.HasKey("SIId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SpesimenId");

                    b.HasIndex("UnitBaseId");

                    b.HasIndex("UnitId");

                    b.ToTable("SpesimenItems");
                });

            modelBuilder.Entity("API.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("API.Entities.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("API.Entities.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId");

                    b.HasIndex("BaseUnitId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.StoreProcedureReturn.GetSpesimensByPointIdSPR", b =>
                {
                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QS_Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QS_Hex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QS_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QS_Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitAbbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SP_SpesimensByPointIdSPR");
                });

            modelBuilder.Entity("API.StoreProcedureReturn.GetSubCategoriesAndPointsSPR", b =>
                {
                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Distance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumPoints")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("URLImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SP_SubCategoriesAndPoints");
                });

            modelBuilder.Entity("API.Entities.Conversion", b =>
                {
                    b.HasOne("API.Entities.Unit", "SourceUnit")
                        .WithMany("ConversionSources")
                        .HasForeignKey("SourceUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Entities.Unit", "TargetUnit")
                        .WithMany("ConversionTargets")
                        .HasForeignKey("TargetUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceUnit");

                    b.Navigation("TargetUnit");
                });

            modelBuilder.Entity("API.Entities.Documento", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany("DocumentUpdates")
                        .HasForeignKey("UserId");

                    b.HasOne("API.Entities.User", "UserUploader")
                        .WithMany("Documents")
                        .HasForeignKey("UserUploaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserUploader");
                });

            modelBuilder.Entity("API.Entities.Item", b =>
                {
                    b.HasOne("API.Entities.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.ClassificationItem", "Classification")
                        .WithMany("Items")
                        .HasForeignKey("ClassificationItemId");

                    b.HasOne("API.Entities.Unit", "Unit")
                        .WithMany("Items")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Classification");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("API.Entities.Place", b =>
                {
                    b.HasOne("API.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.SubCategory", "SubCategory")
                        .WithMany("Places")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("API.Entities.Point", b =>
                {
                    b.HasOne("API.Entities.Place", "Place")
                        .WithMany("Points")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("API.Entities.QualityStandardItem", b =>
                {
                    b.HasOne("API.Entities.Item", "Item")
                        .WithMany("QualityStandardItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.QualityStandard", "QualityStandard")
                        .WithMany("QualityStandardItems")
                        .HasForeignKey("QSId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Entities.Unit", "Unit")
                        .WithMany("QualityStandardItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("QualityStandard");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("API.Entities.QualityStandardItemRange", b =>
                {
                    b.HasOne("API.Entities.QualityStandardItem", "QualityStandardItem")
                        .WithMany("QualityStandardItemRanges")
                        .HasForeignKey("QualityStandardItemQSIId");

                    b.HasOne("API.Entities.Semaphore", "Semaphore")
                        .WithMany("QualityStandardItemRanges")
                        .HasForeignKey("SemaphoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QualityStandardItem");

                    b.Navigation("Semaphore");
                });

            modelBuilder.Entity("API.Entities.Spesimen", b =>
                {
                    b.HasOne("API.Entities.User", "CreatedBy")
                        .WithMany("Spesimens")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Point", "Point")
                        .WithMany("Spesimens")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Point");
                });

            modelBuilder.Entity("API.Entities.SpesimenItem", b =>
                {
                    b.HasOne("API.Entities.Item", "Item")
                        .WithMany("SpesimenItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Spesimen", "Spesimen")
                        .WithMany("SpesimenItems")
                        .HasForeignKey("SpesimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Unit", "UnitBase")
                        .WithMany("SpesimenItemBases")
                        .HasForeignKey("UnitBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Entities.Unit", "Unit")
                        .WithMany("SpesimenItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Spesimen");

                    b.Navigation("Unit");

                    b.Navigation("UnitBase");
                });

            modelBuilder.Entity("API.Entities.State", b =>
                {
                    b.HasOne("API.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("API.Entities.SubCategory", b =>
                {
                    b.HasOne("API.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API.Entities.Unit", b =>
                {
                    b.HasOne("API.Entities.Unit", "BaseUnit")
                        .WithMany()
                        .HasForeignKey("BaseUnitId");

                    b.Navigation("BaseUnit");
                });

            modelBuilder.Entity("API.Entities.Category", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("API.Entities.ClassificationItem", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("API.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("API.Entities.Item", b =>
                {
                    b.Navigation("QualityStandardItems");

                    b.Navigation("SpesimenItems");
                });

            modelBuilder.Entity("API.Entities.Place", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("API.Entities.Point", b =>
                {
                    b.Navigation("Spesimens");
                });

            modelBuilder.Entity("API.Entities.QualityStandard", b =>
                {
                    b.Navigation("QualityStandardItems");
                });

            modelBuilder.Entity("API.Entities.QualityStandardItem", b =>
                {
                    b.Navigation("QualityStandardItemRanges");
                });

            modelBuilder.Entity("API.Entities.Semaphore", b =>
                {
                    b.Navigation("QualityStandardItemRanges");
                });

            modelBuilder.Entity("API.Entities.Spesimen", b =>
                {
                    b.Navigation("SpesimenItems");
                });

            modelBuilder.Entity("API.Entities.SubCategory", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("API.Entities.Unit", b =>
                {
                    b.Navigation("ConversionSources");

                    b.Navigation("ConversionTargets");

                    b.Navigation("Items");

                    b.Navigation("QualityStandardItems");

                    b.Navigation("SpesimenItemBases");

                    b.Navigation("SpesimenItems");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Navigation("DocumentUpdates");

                    b.Navigation("Documents");

                    b.Navigation("Spesimens");
                });
#pragma warning restore 612, 618
        }
    }
}
